{"ast":null,"code":"export const getNFTsScript = `\nimport MyNFT from 0xfaddb86da8808076\nimport NonFungibleToken from 0x631e88ae7f1d7c20\n\npub fun main(account: Address): [&MyNFT.NFT] {\n  let collection = getAccount(account).getCapability(/public/MyNFTCollection)\n                    .borrow<&MyNFT.Collection{NonFungibleToken.CollectionPublic, MyNFT.CollectionPublic}>()\n                    ?? panic(\"Can't get the User's collection.\")\n\n  let returnVals: [&MyNFT.NFT] = []\n\n  let ids = collection.getIDs()\n  for id in ids {\n    returnVals.append(collection.borrowEntireNFT(id: id))\n  }\n\n  return returnVals\n}\n`;","map":{"version":3,"sources":["C:/Users/DM/Desktop/nftdapp/src/cadence/scripts/get_nfts.js"],"names":["getNFTsScript"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAlBO","sourcesContent":["export const getNFTsScript = `\r\nimport MyNFT from 0xfaddb86da8808076\r\nimport NonFungibleToken from 0x631e88ae7f1d7c20\r\n\r\npub fun main(account: Address): [&MyNFT.NFT] {\r\n  let collection = getAccount(account).getCapability(/public/MyNFTCollection)\r\n                    .borrow<&MyNFT.Collection{NonFungibleToken.CollectionPublic, MyNFT.CollectionPublic}>()\r\n                    ?? panic(\"Can't get the User's collection.\")\r\n\r\n  let returnVals: [&MyNFT.NFT] = []\r\n\r\n  let ids = collection.getIDs()\r\n  for id in ids {\r\n    returnVals.append(collection.borrowEntireNFT(id: id))\r\n  }\r\n\r\n  return returnVals\r\n}\r\n`"]},"metadata":{},"sourceType":"module"}