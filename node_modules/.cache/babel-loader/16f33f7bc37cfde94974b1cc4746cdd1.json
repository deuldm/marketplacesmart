{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NodeHttpTransport = void 0;\n\nvar http = require(\"http\");\n\nvar https = require(\"https\");\n\nvar url = require(\"url\");\n\nvar grpc_web_1 = require(\"@improbable-eng/grpc-web\");\n\nfunction NodeHttpTransport() {\n  return function (opts) {\n    return new NodeHttp(opts);\n  };\n}\n\nexports.NodeHttpTransport = NodeHttpTransport;\n\nvar NodeHttp = function () {\n  function NodeHttp(transportOptions) {\n    this.options = transportOptions;\n  }\n\n  NodeHttp.prototype.sendMessage = function (msgBytes) {\n    if (!this.options.methodDefinition.requestStream && !this.options.methodDefinition.responseStream) {\n      this.request.setHeader(\"Content-Length\", msgBytes.byteLength);\n    }\n\n    this.request.write(toBuffer(msgBytes));\n    this.request.end();\n  };\n\n  NodeHttp.prototype.finishSend = function () {};\n\n  NodeHttp.prototype.responseCallback = function (response) {\n    var _this = this;\n\n    this.options.debug && console.log(\"NodeHttp.response\", response.statusCode);\n    var headers = filterHeadersForUndefined(response.headers);\n    this.options.onHeaders(new grpc_web_1.grpc.Metadata(headers), response.statusCode);\n    response.on(\"data\", function (chunk) {\n      _this.options.debug && console.log(\"NodeHttp.data\", chunk);\n\n      _this.options.onChunk(toArrayBuffer(chunk));\n    });\n    response.on(\"end\", function () {\n      _this.options.debug && console.log(\"NodeHttp.end\");\n\n      _this.options.onEnd();\n    });\n  };\n\n  ;\n\n  NodeHttp.prototype.start = function (metadata) {\n    var _this = this;\n\n    var headers = {};\n    metadata.forEach(function (key, values) {\n      headers[key] = values.join(\", \");\n    });\n    var parsedUrl = url.parse(this.options.url);\n    var httpOptions = {\n      host: parsedUrl.hostname,\n      port: parsedUrl.port ? parseInt(parsedUrl.port) : undefined,\n      path: parsedUrl.path,\n      headers: headers,\n      method: \"POST\"\n    };\n\n    if (parsedUrl.protocol === \"https:\") {\n      this.request = https.request(httpOptions, this.responseCallback.bind(this));\n    } else {\n      this.request = http.request(httpOptions, this.responseCallback.bind(this));\n    }\n\n    this.request.on(\"error\", function (err) {\n      _this.options.debug && console.log(\"NodeHttp.error\", err);\n\n      _this.options.onEnd(err);\n    });\n  };\n\n  NodeHttp.prototype.cancel = function () {\n    this.options.debug && console.log(\"NodeHttp.abort\");\n    this.request.abort();\n  };\n\n  return NodeHttp;\n}();\n\nfunction filterHeadersForUndefined(headers) {\n  var filteredHeaders = {};\n\n  for (var key in headers) {\n    var value = headers[key];\n\n    if (headers.hasOwnProperty(key)) {\n      if (value !== undefined) {\n        filteredHeaders[key] = value;\n      }\n    }\n  }\n\n  return filteredHeaders;\n}\n\nfunction toArrayBuffer(buf) {\n  var view = new Uint8Array(buf.length);\n\n  for (var i = 0; i < buf.length; i++) {\n    view[i] = buf[i];\n  }\n\n  return view;\n}\n\nfunction toBuffer(ab) {\n  var buf = Buffer.alloc(ab.byteLength);\n\n  for (var i = 0; i < buf.length; i++) {\n    buf[i] = ab[i];\n  }\n\n  return buf;\n}","map":{"version":3,"mappings":"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","names":["NodeHttpTransport","opts","NodeHttp","exports","transportOptions","options","msgBytes","methodDefinition","requestStream","responseStream","request","setHeader","byteLength","write","toBuffer","end","response","debug","console","log","statusCode","headers","filterHeadersForUndefined","onHeaders","grpc_web_1","Metadata","on","_this","chunk","onChunk","toArrayBuffer","onEnd","metadata","forEach","key","values","join","parsedUrl","url","parse","httpOptions","host","hostname","port","parseInt","undefined","path","method","protocol","https","responseCallback","bind","http","err","abort","filteredHeaders","value","hasOwnProperty","buf","view","Uint8Array","length","i","ab","Buffer","alloc"],"sources":["C:\\Users\\DM\\Desktop\\nftdapp\\node_modules\\@improbable-eng\\grpc-web-node-http-transport\\src\\index.ts"],"sourcesContent":["import * as http from \"http\";\nimport * as https from \"https\";\nimport * as url from \"url\";\nimport { grpc } from \"@improbable-eng/grpc-web\";\n\nexport function NodeHttpTransport(): grpc.TransportFactory {\n  return (opts: grpc.TransportOptions) => {\n    return new NodeHttp(opts);\n  };\n}\n\nclass NodeHttp implements grpc.Transport {\n  options: grpc.TransportOptions;\n  request: http.ClientRequest;\n\n  constructor(transportOptions: grpc.TransportOptions) {\n    this.options = transportOptions;\n  }\n\n  sendMessage(msgBytes: Uint8Array) {\n    if (!this.options.methodDefinition.requestStream  && !this.options.methodDefinition.responseStream) {\n        // Disable chunked encoding if we are not using streams\n        this.request.setHeader(\"Content-Length\", msgBytes.byteLength);\n    }\n    this.request.write(toBuffer(msgBytes));\n    this.request.end();\n  }\n\n  finishSend() {\n\n  }\n\n  responseCallback(response: http.IncomingMessage) {\n    this.options.debug && console.log(\"NodeHttp.response\", response.statusCode);\n    const headers = filterHeadersForUndefined(response.headers);\n    this.options.onHeaders(new grpc.Metadata(headers), response.statusCode!);\n\n    response.on(\"data\", chunk => {\n      this.options.debug && console.log(\"NodeHttp.data\", chunk);\n      this.options.onChunk(toArrayBuffer(chunk as Buffer));\n    });\n\n    response.on(\"end\", () => {\n      this.options.debug && console.log(\"NodeHttp.end\");\n      this.options.onEnd();\n    });\n  };\n\n  start(metadata: grpc.Metadata) {\n    const headers: { [key: string]: string } = {};\n    metadata.forEach((key, values) => {\n      headers[key] = values.join(\", \");\n    });\n    const parsedUrl = url.parse(this.options.url);\n\n    const httpOptions = {\n      host: parsedUrl.hostname,\n      port: parsedUrl.port ? parseInt(parsedUrl.port) : undefined,\n      path: parsedUrl.path,\n      headers: headers,\n      method: \"POST\"\n    };\n    if (parsedUrl.protocol === \"https:\") {\n      this.request = https.request(httpOptions, this.responseCallback.bind(this));\n    } else {\n      this.request = http.request(httpOptions, this.responseCallback.bind(this));\n    }\n    this.request.on(\"error\", err => {\n      this.options.debug && console.log(\"NodeHttp.error\", err);\n      this.options.onEnd(err);\n    });\n  }\n\n  cancel() {\n    this.options.debug && console.log(\"NodeHttp.abort\");\n    this.request.abort();\n  }\n}\n\nfunction filterHeadersForUndefined(headers: {[key: string]: string | string[] | undefined}): {[key: string]: string | string[]} {\n  const filteredHeaders: {[key: string]: string | string[]} = {};\n\n  for (let key in headers) {\n    const value = headers[key];\n    if (headers.hasOwnProperty(key)) {\n      if (value !== undefined) {\n        filteredHeaders[key] = value;\n      }\n    }\n  }\n\n  return filteredHeaders;\n}\n\nfunction toArrayBuffer(buf: Buffer): Uint8Array {\n  const view = new Uint8Array(buf.length);\n  for (let i = 0; i < buf.length; i++) {\n    view[i] = buf[i];\n  }\n  return view;\n}\n\nfunction toBuffer(ab: Uint8Array): Buffer {\n  const buf = Buffer.alloc(ab.byteLength);\n  for (let i = 0; i < buf.length; i++) {\n    buf[i] = ab[i];\n  }\n  return buf;\n}\n"]},"metadata":{},"sourceType":"script"}