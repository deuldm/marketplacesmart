{"ast":null,"code":"import { Multiaddr } from 'multiaddr';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { Provider } from './response-types.js';\nexport const createFindProvs = configure(api => {\n  async function* findProvs(cid) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const res = await api.post('dht/findprovs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.toString(),\n        ...options\n      }),\n      headers: options.headers\n    });\n\n    for await (const message of res.ndjson()) {\n      if (message.Type === Provider && message.Responses) {\n        for (const {\n          ID,\n          Addrs\n        } of message.Responses) {\n          yield {\n            id: ID,\n            addrs: (Addrs || []).map(a => new Multiaddr(a))\n          };\n        }\n      }\n    }\n  }\n\n  return findProvs;\n});","map":{"version":3,"sources":["C:/Users/DM/Desktop/nftdapp/node_modules/ipfs-http-client/esm/src/dht/find-provs.js"],"names":["Multiaddr","configure","toUrlSearchParams","Provider","createFindProvs","api","findProvs","cid","options","res","post","signal","searchParams","arg","toString","headers","message","ndjson","Type","Responses","ID","Addrs","id","addrs","map","a"],"mappings":"AAAA,SAASA,SAAT,QAA0B,WAA1B;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAO,MAAMC,eAAe,GAAGH,SAAS,CAACI,GAAG,IAAI;AAC9C,kBAAgBC,SAAhB,CAA0BC,GAA1B,EAA6C;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAC3C,UAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAJ,CAAS,eAAT,EAA0B;AAC1CC,MAAAA,MAAM,EAAEH,OAAO,CAACG,MAD0B;AAE1CC,MAAAA,YAAY,EAAEV,iBAAiB,CAAC;AAC9BW,QAAAA,GAAG,EAAEN,GAAG,CAACO,QAAJ,EADyB;AAE9B,WAAGN;AAF2B,OAAD,CAFW;AAM1CO,MAAAA,OAAO,EAAEP,OAAO,CAACO;AANyB,KAA1B,CAAlB;;AAQA,eAAW,MAAMC,OAAjB,IAA4BP,GAAG,CAACQ,MAAJ,EAA5B,EAA0C;AACxC,UAAID,OAAO,CAACE,IAAR,KAAiBf,QAAjB,IAA6Ba,OAAO,CAACG,SAAzC,EAAoD;AAClD,aAAK,MAAM;AAACC,UAAAA,EAAD;AAAKC,UAAAA;AAAL,SAAX,IAA0BL,OAAO,CAACG,SAAlC,EAA6C;AAC3C,gBAAM;AACJG,YAAAA,EAAE,EAAEF,EADA;AAEJG,YAAAA,KAAK,EAAE,CAACF,KAAK,IAAI,EAAV,EAAcG,GAAd,CAAkBC,CAAC,IAAI,IAAIzB,SAAJ,CAAcyB,CAAd,CAAvB;AAFH,WAAN;AAID;AACF;AACF;AACF;;AACD,SAAOnB,SAAP;AACD,CAtBuC,CAAjC","sourcesContent":["import { Multiaddr } from 'multiaddr';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { Provider } from './response-types.js';\nexport const createFindProvs = configure(api => {\n  async function* findProvs(cid, options = {}) {\n    const res = await api.post('dht/findprovs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.toString(),\n        ...options\n      }),\n      headers: options.headers\n    });\n    for await (const message of res.ndjson()) {\n      if (message.Type === Provider && message.Responses) {\n        for (const {ID, Addrs} of message.Responses) {\n          yield {\n            id: ID,\n            addrs: (Addrs || []).map(a => new Multiaddr(a))\n          };\n        }\n      }\n    }\n  }\n  return findProvs;\n});"]},"metadata":{},"sourceType":"module"}