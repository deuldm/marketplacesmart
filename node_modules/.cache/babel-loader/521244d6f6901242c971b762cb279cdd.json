{"ast":null,"code":"import { Multiaddr } from 'multiaddr';\nimport { objectToCamel } from '../lib/object-to-camel.js';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { abortSignal } from '../lib/abort-signal.js';\nimport { AbortController } from 'native-abort-controller';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nexport const createPut = configure(api => {\n  async function* put(key, value) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n    const res = await api.post('dht/put', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: uint8ArrayToString(key),\n        ...options\n      }),\n      ...(await multipartRequest([value], controller, options.headers))\n    });\n\n    for await (let message of res.ndjson()) {\n      message = objectToCamel(message);\n\n      if (message.responses) {\n        message.responses = message.responses.map(_ref => {\n          let {\n            ID,\n            Addrs\n          } = _ref;\n          return {\n            id: ID,\n            addrs: (Addrs || []).map(a => new Multiaddr(a))\n          };\n        });\n      }\n\n      yield message;\n    }\n  }\n\n  return put;\n});","map":{"version":3,"sources":["C:/Users/DM/Desktop/nftdapp/node_modules/ipfs-http-client/esm/src/dht/put.js"],"names":["Multiaddr","objectToCamel","configure","toUrlSearchParams","multipartRequest","abortSignal","AbortController","toString","uint8ArrayToString","createPut","api","put","key","value","options","controller","signal","res","post","searchParams","arg","headers","message","ndjson","responses","map","ID","Addrs","id","addrs","a"],"mappings":"AAAA,SAASA,SAAT,QAA0B,WAA1B;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,gBAAT,QAAiC,mCAAjC;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,QAAQ,IAAIC,kBAArB,QAA+C,uBAA/C;AACA,OAAO,MAAMC,SAAS,GAAGP,SAAS,CAACQ,GAAG,IAAI;AACxC,kBAAgBC,GAAhB,CAAoBC,GAApB,EAAyBC,KAAzB,EAA8C;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAC5C,UAAMC,UAAU,GAAG,IAAIT,eAAJ,EAAnB;AACA,UAAMU,MAAM,GAAGX,WAAW,CAACU,UAAU,CAACC,MAAZ,EAAoBF,OAAO,CAACE,MAA5B,CAA1B;AACA,UAAMC,GAAG,GAAG,MAAMP,GAAG,CAACQ,IAAJ,CAAS,SAAT,EAAoB;AACpCF,MAAAA,MADoC;AAEpCG,MAAAA,YAAY,EAAEhB,iBAAiB,CAAC;AAC9BiB,QAAAA,GAAG,EAAEZ,kBAAkB,CAACI,GAAD,CADO;AAE9B,WAAGE;AAF2B,OAAD,CAFK;AAMpC,UAAG,MAAMV,gBAAgB,CAAC,CAACS,KAAD,CAAD,EAAUE,UAAV,EAAsBD,OAAO,CAACO,OAA9B,CAAzB;AANoC,KAApB,CAAlB;;AAQA,eAAW,IAAIC,OAAf,IAA0BL,GAAG,CAACM,MAAJ,EAA1B,EAAwC;AACtCD,MAAAA,OAAO,GAAGrB,aAAa,CAACqB,OAAD,CAAvB;;AACA,UAAIA,OAAO,CAACE,SAAZ,EAAuB;AACrBF,QAAAA,OAAO,CAACE,SAAR,GAAoBF,OAAO,CAACE,SAAR,CAAkBC,GAAlB,CAAsB;AAAA,cAAC;AAACC,YAAAA,EAAD;AAAKC,YAAAA;AAAL,WAAD;AAAA,iBAAkB;AAC1DC,YAAAA,EAAE,EAAEF,EADsD;AAE1DG,YAAAA,KAAK,EAAE,CAACF,KAAK,IAAI,EAAV,EAAcF,GAAd,CAAkBK,CAAC,IAAI,IAAI9B,SAAJ,CAAc8B,CAAd,CAAvB;AAFmD,WAAlB;AAAA,SAAtB,CAApB;AAID;;AACD,YAAMR,OAAN;AACD;AACF;;AACD,SAAOX,GAAP;AACD,CAxBiC,CAA3B","sourcesContent":["import { Multiaddr } from 'multiaddr';\nimport { objectToCamel } from '../lib/object-to-camel.js';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { abortSignal } from '../lib/abort-signal.js';\nimport { AbortController } from 'native-abort-controller';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nexport const createPut = configure(api => {\n  async function* put(key, value, options = {}) {\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n    const res = await api.post('dht/put', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: uint8ArrayToString(key),\n        ...options\n      }),\n      ...await multipartRequest([value], controller, options.headers)\n    });\n    for await (let message of res.ndjson()) {\n      message = objectToCamel(message);\n      if (message.responses) {\n        message.responses = message.responses.map(({ID, Addrs}) => ({\n          id: ID,\n          addrs: (Addrs || []).map(a => new Multiaddr(a))\n        }));\n      }\n      yield message;\n    }\n  }\n  return put;\n});"]},"metadata":{},"sourceType":"module"}