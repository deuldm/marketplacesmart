{"ast":null,"code":"import { Multiaddr } from 'multiaddr';\nimport { objectToCamel } from '../lib/object-to-camel.js';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createProvide = configure(api => {\n  async function* provide(cids) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      recursive: false\n    };\n    const cidArr = Array.isArray(cids) ? cids : [cids];\n    const res = await api.post('dht/provide', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cidArr.map(cid => cid.toString()),\n        ...options\n      }),\n      headers: options.headers\n    });\n\n    for await (let message of res.ndjson()) {\n      message = objectToCamel(message);\n\n      if (message.responses) {\n        message.responses = message.responses.map(_ref => {\n          let {\n            ID,\n            Addrs\n          } = _ref;\n          return {\n            id: ID,\n            addrs: (Addrs || []).map(a => new Multiaddr(a))\n          };\n        });\n      } else {\n        message.responses = [];\n      }\n\n      yield message;\n    }\n  }\n\n  return provide;\n});","map":{"version":3,"sources":["C:/Users/DM/Desktop/nftdapp/node_modules/ipfs-http-client/esm/src/dht/provide.js"],"names":["Multiaddr","objectToCamel","configure","toUrlSearchParams","createProvide","api","provide","cids","options","recursive","cidArr","Array","isArray","res","post","signal","searchParams","arg","map","cid","toString","headers","message","ndjson","responses","ID","Addrs","id","addrs","a"],"mappings":"AAAA,SAASA,SAAT,QAA0B,WAA1B;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,OAAO,MAAMC,aAAa,GAAGF,SAAS,CAACG,GAAG,IAAI;AAC5C,kBAAgBC,OAAhB,CAAwBC,IAAxB,EAA8D;AAAA,QAAhCC,OAAgC,uEAAtB;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAAsB;AAC5D,UAAMC,MAAM,GAAGC,KAAK,CAACC,OAAN,CAAcL,IAAd,IAAsBA,IAAtB,GAA6B,CAACA,IAAD,CAA5C;AACA,UAAMM,GAAG,GAAG,MAAMR,GAAG,CAACS,IAAJ,CAAS,aAAT,EAAwB;AACxCC,MAAAA,MAAM,EAAEP,OAAO,CAACO,MADwB;AAExCC,MAAAA,YAAY,EAAEb,iBAAiB,CAAC;AAC9Bc,QAAAA,GAAG,EAAEP,MAAM,CAACQ,GAAP,CAAWC,GAAG,IAAIA,GAAG,CAACC,QAAJ,EAAlB,CADyB;AAE9B,WAAGZ;AAF2B,OAAD,CAFS;AAMxCa,MAAAA,OAAO,EAAEb,OAAO,CAACa;AANuB,KAAxB,CAAlB;;AAQA,eAAW,IAAIC,OAAf,IAA0BT,GAAG,CAACU,MAAJ,EAA1B,EAAwC;AACtCD,MAAAA,OAAO,GAAGrB,aAAa,CAACqB,OAAD,CAAvB;;AACA,UAAIA,OAAO,CAACE,SAAZ,EAAuB;AACrBF,QAAAA,OAAO,CAACE,SAAR,GAAoBF,OAAO,CAACE,SAAR,CAAkBN,GAAlB,CAAsB;AAAA,cAAC;AAACO,YAAAA,EAAD;AAAKC,YAAAA;AAAL,WAAD;AAAA,iBAAkB;AAC1DC,YAAAA,EAAE,EAAEF,EADsD;AAE1DG,YAAAA,KAAK,EAAE,CAACF,KAAK,IAAI,EAAV,EAAcR,GAAd,CAAkBW,CAAC,IAAI,IAAI7B,SAAJ,CAAc6B,CAAd,CAAvB;AAFmD,WAAlB;AAAA,SAAtB,CAApB;AAID,OALD,MAKO;AACLP,QAAAA,OAAO,CAACE,SAAR,GAAoB,EAApB;AACD;;AACD,YAAMF,OAAN;AACD;AACF;;AACD,SAAOhB,OAAP;AACD,CAzBqC,CAA/B","sourcesContent":["import { Multiaddr } from 'multiaddr';\nimport { objectToCamel } from '../lib/object-to-camel.js';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createProvide = configure(api => {\n  async function* provide(cids, options = { recursive: false }) {\n    const cidArr = Array.isArray(cids) ? cids : [cids];\n    const res = await api.post('dht/provide', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cidArr.map(cid => cid.toString()),\n        ...options\n      }),\n      headers: options.headers\n    });\n    for await (let message of res.ndjson()) {\n      message = objectToCamel(message);\n      if (message.responses) {\n        message.responses = message.responses.map(({ID, Addrs}) => ({\n          id: ID,\n          addrs: (Addrs || []).map(a => new Multiaddr(a))\n        }));\n      } else {\n        message.responses = [];\n      }\n      yield message;\n    }\n  }\n  return provide;\n});"]},"metadata":{},"sourceType":"module"}