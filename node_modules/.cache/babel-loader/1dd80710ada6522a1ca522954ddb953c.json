{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { abortSignal } from '../lib/abort-signal.js';\nimport { AbortController } from 'native-abort-controller';\nexport const createPut = (codecs, options) => {\n  const fn = configure(api => {\n    const put = async function (dagNode) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      const settings = {\n        format: 'dag-cbor',\n        hashAlg: 'sha2-256',\n        inputEnc: 'raw',\n        ...options\n      };\n      const codec = await codecs.getCodec(settings.format);\n      const serialized = codec.encode(dagNode);\n      const controller = new AbortController();\n      const signal = abortSignal(controller.signal, settings.signal);\n      const res = await api.post('dag/put', {\n        timeout: settings.timeout,\n        signal,\n        searchParams: toUrlSearchParams(settings),\n        ...(await multipartRequest([serialized], controller, settings.headers))\n      });\n      const data = await res.json();\n      return CID.parse(data.Cid['/']);\n    };\n\n    return put;\n  });\n  return fn(options);\n};","map":{"version":3,"sources":["C:/Users/DM/Desktop/nftdapp/node_modules/ipfs-http-client/esm/src/dag/put.js"],"names":["CID","configure","multipartRequest","toUrlSearchParams","abortSignal","AbortController","createPut","codecs","options","fn","api","put","dagNode","settings","format","hashAlg","inputEnc","codec","getCodec","serialized","encode","controller","signal","res","post","timeout","searchParams","headers","data","json","parse","Cid"],"mappings":"AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,gBAAT,QAAiC,mCAAjC;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,OAAO,MAAMC,SAAS,GAAG,CAACC,MAAD,EAASC,OAAT,KAAqB;AAC5C,QAAMC,EAAE,GAAGR,SAAS,CAACS,GAAG,IAAI;AAC1B,UAAMC,GAAG,GAAG,gBAAOC,OAAP,EAAiC;AAAA,UAAjBJ,OAAiB,uEAAP,EAAO;AAC3C,YAAMK,QAAQ,GAAG;AACfC,QAAAA,MAAM,EAAE,UADO;AAEfC,QAAAA,OAAO,EAAE,UAFM;AAGfC,QAAAA,QAAQ,EAAE,KAHK;AAIf,WAAGR;AAJY,OAAjB;AAMA,YAAMS,KAAK,GAAG,MAAMV,MAAM,CAACW,QAAP,CAAgBL,QAAQ,CAACC,MAAzB,CAApB;AACA,YAAMK,UAAU,GAAGF,KAAK,CAACG,MAAN,CAAaR,OAAb,CAAnB;AACA,YAAMS,UAAU,GAAG,IAAIhB,eAAJ,EAAnB;AACA,YAAMiB,MAAM,GAAGlB,WAAW,CAACiB,UAAU,CAACC,MAAZ,EAAoBT,QAAQ,CAACS,MAA7B,CAA1B;AACA,YAAMC,GAAG,GAAG,MAAMb,GAAG,CAACc,IAAJ,CAAS,SAAT,EAAoB;AACpCC,QAAAA,OAAO,EAAEZ,QAAQ,CAACY,OADkB;AAEpCH,QAAAA,MAFoC;AAGpCI,QAAAA,YAAY,EAAEvB,iBAAiB,CAACU,QAAD,CAHK;AAIpC,YAAG,MAAMX,gBAAgB,CAAC,CAACiB,UAAD,CAAD,EAAeE,UAAf,EAA2BR,QAAQ,CAACc,OAApC,CAAzB;AAJoC,OAApB,CAAlB;AAMA,YAAMC,IAAI,GAAG,MAAML,GAAG,CAACM,IAAJ,EAAnB;AACA,aAAO7B,GAAG,CAAC8B,KAAJ,CAAUF,IAAI,CAACG,GAAL,CAAS,GAAT,CAAV,CAAP;AACD,KAnBD;;AAoBA,WAAOpB,GAAP;AACD,GAtBmB,CAApB;AAuBA,SAAOF,EAAE,CAACD,OAAD,CAAT;AACD,CAzBM","sourcesContent":["import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { abortSignal } from '../lib/abort-signal.js';\nimport { AbortController } from 'native-abort-controller';\nexport const createPut = (codecs, options) => {\n  const fn = configure(api => {\n    const put = async (dagNode, options = {}) => {\n      const settings = {\n        format: 'dag-cbor',\n        hashAlg: 'sha2-256',\n        inputEnc: 'raw',\n        ...options\n      };\n      const codec = await codecs.getCodec(settings.format);\n      const serialized = codec.encode(dagNode);\n      const controller = new AbortController();\n      const signal = abortSignal(controller.signal, settings.signal);\n      const res = await api.post('dag/put', {\n        timeout: settings.timeout,\n        signal,\n        searchParams: toUrlSearchParams(settings),\n        ...await multipartRequest([serialized], controller, settings.headers)\n      });\n      const data = await res.json();\n      return CID.parse(data.Cid['/']);\n    };\n    return put;\n  });\n  return fn(options);\n};"]},"metadata":{},"sourceType":"module"}