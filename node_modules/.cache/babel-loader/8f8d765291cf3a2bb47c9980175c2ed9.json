{"ast":null,"code":"import { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { Value } from './response-types.js';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nexport const createGet = configure(api => {\n  async function get(key) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const res = await api.post('dht/get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: key instanceof Uint8Array ? uint8ArrayToString(key) : key,\n        ...options\n      }),\n      headers: options.headers\n    });\n\n    for await (const message of res.ndjson()) {\n      if (message.Type === Value) {\n        return uint8ArrayFromString(message.Extra, 'base64pad');\n      }\n    }\n\n    throw new Error('not found');\n  }\n\n  return get;\n});","map":{"version":3,"sources":["C:/Users/DM/Desktop/nftdapp/node_modules/ipfs-http-client/esm/src/dht/get.js"],"names":["configure","toUrlSearchParams","Value","fromString","uint8ArrayFromString","toString","uint8ArrayToString","createGet","api","get","key","options","res","post","signal","searchParams","arg","Uint8Array","headers","message","ndjson","Type","Extra","Error"],"mappings":"AAAA,SAASA,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,KAAT,QAAsB,qBAAtB;AACA,SAASC,UAAU,IAAIC,oBAAvB,QAAmD,yBAAnD;AACA,SAASC,QAAQ,IAAIC,kBAArB,QAA+C,uBAA/C;AACA,OAAO,MAAMC,SAAS,GAAGP,SAAS,CAACQ,GAAG,IAAI;AACxC,iBAAeC,GAAf,CAAmBC,GAAnB,EAAsC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACpC,UAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAJ,CAAS,SAAT,EAAoB;AACpCC,MAAAA,MAAM,EAAEH,OAAO,CAACG,MADoB;AAEpCC,MAAAA,YAAY,EAAEd,iBAAiB,CAAC;AAC9Be,QAAAA,GAAG,EAAEN,GAAG,YAAYO,UAAf,GAA4BX,kBAAkB,CAACI,GAAD,CAA9C,GAAsDA,GAD7B;AAE9B,WAAGC;AAF2B,OAAD,CAFK;AAMpCO,MAAAA,OAAO,EAAEP,OAAO,CAACO;AANmB,KAApB,CAAlB;;AAQA,eAAW,MAAMC,OAAjB,IAA4BP,GAAG,CAACQ,MAAJ,EAA5B,EAA0C;AACxC,UAAID,OAAO,CAACE,IAAR,KAAiBnB,KAArB,EAA4B;AAC1B,eAAOE,oBAAoB,CAACe,OAAO,CAACG,KAAT,EAAgB,WAAhB,CAA3B;AACD;AACF;;AACD,UAAM,IAAIC,KAAJ,CAAU,WAAV,CAAN;AACD;;AACD,SAAOd,GAAP;AACD,CAlBiC,CAA3B","sourcesContent":["import { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { Value } from './response-types.js';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nexport const createGet = configure(api => {\n  async function get(key, options = {}) {\n    const res = await api.post('dht/get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: key instanceof Uint8Array ? uint8ArrayToString(key) : key,\n        ...options\n      }),\n      headers: options.headers\n    });\n    for await (const message of res.ndjson()) {\n      if (message.Type === Value) {\n        return uint8ArrayFromString(message.Extra, 'base64pad');\n      }\n    }\n    throw new Error('not found');\n  }\n  return get;\n});"]},"metadata":{},"sourceType":"module"}