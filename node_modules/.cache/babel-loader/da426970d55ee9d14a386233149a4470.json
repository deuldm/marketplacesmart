{"ast":null,"code":"import { Multiaddr } from 'multiaddr';\nimport { objectToCamel } from '../lib/object-to-camel.js';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createQuery = configure(api => {\n  async function* query(peerId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const res = await api.post('dht/query', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: peerId.toString(),\n        ...options\n      }),\n      headers: options.headers\n    });\n\n    for await (let message of res.ndjson()) {\n      message = objectToCamel(message);\n      message.responses = (message.responses || []).map(_ref => {\n        let {\n          ID,\n          Addrs\n        } = _ref;\n        return {\n          id: ID,\n          addrs: (Addrs || []).map(a => new Multiaddr(a))\n        };\n      });\n      yield message;\n    }\n  }\n\n  return query;\n});","map":{"version":3,"sources":["C:/Users/DM/Desktop/nftdapp/node_modules/ipfs-http-client/esm/src/dht/query.js"],"names":["Multiaddr","objectToCamel","configure","toUrlSearchParams","createQuery","api","query","peerId","options","res","post","signal","searchParams","arg","toString","headers","message","ndjson","responses","map","ID","Addrs","id","addrs","a"],"mappings":"AAAA,SAASA,SAAT,QAA0B,WAA1B;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,OAAO,MAAMC,WAAW,GAAGF,SAAS,CAACG,GAAG,IAAI;AAC1C,kBAAgBC,KAAhB,CAAsBC,MAAtB,EAA4C;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAC1C,UAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAJ,CAAS,WAAT,EAAsB;AACtCC,MAAAA,MAAM,EAAEH,OAAO,CAACG,MADsB;AAEtCC,MAAAA,YAAY,EAAET,iBAAiB,CAAC;AAC9BU,QAAAA,GAAG,EAAEN,MAAM,CAACO,QAAP,EADyB;AAE9B,WAAGN;AAF2B,OAAD,CAFO;AAMtCO,MAAAA,OAAO,EAAEP,OAAO,CAACO;AANqB,KAAtB,CAAlB;;AAQA,eAAW,IAAIC,OAAf,IAA0BP,GAAG,CAACQ,MAAJ,EAA1B,EAAwC;AACtCD,MAAAA,OAAO,GAAGf,aAAa,CAACe,OAAD,CAAvB;AACAA,MAAAA,OAAO,CAACE,SAAR,GAAoB,CAACF,OAAO,CAACE,SAAR,IAAqB,EAAtB,EAA0BC,GAA1B,CAA8B;AAAA,YAAC;AAACC,UAAAA,EAAD;AAAKC,UAAAA;AAAL,SAAD;AAAA,eAAkB;AAClEC,UAAAA,EAAE,EAAEF,EAD8D;AAElEG,UAAAA,KAAK,EAAE,CAACF,KAAK,IAAI,EAAV,EAAcF,GAAd,CAAkBK,CAAC,IAAI,IAAIxB,SAAJ,CAAcwB,CAAd,CAAvB;AAF2D,SAAlB;AAAA,OAA9B,CAApB;AAIA,YAAMR,OAAN;AACD;AACF;;AACD,SAAOV,KAAP;AACD,CApBmC,CAA7B","sourcesContent":["import { Multiaddr } from 'multiaddr';\nimport { objectToCamel } from '../lib/object-to-camel.js';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createQuery = configure(api => {\n  async function* query(peerId, options = {}) {\n    const res = await api.post('dht/query', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: peerId.toString(),\n        ...options\n      }),\n      headers: options.headers\n    });\n    for await (let message of res.ndjson()) {\n      message = objectToCamel(message);\n      message.responses = (message.responses || []).map(({ID, Addrs}) => ({\n        id: ID,\n        addrs: (Addrs || []).map(a => new Multiaddr(a))\n      }));\n      yield message;\n    }\n  }\n  return query;\n});"]},"metadata":{},"sourceType":"module"}