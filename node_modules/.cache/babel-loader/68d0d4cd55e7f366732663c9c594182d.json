{"ast":null,"code":"import { Multiaddr } from 'multiaddr';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { FinalPeer } from './response-types.js';\nexport const createFindPeer = configure(api => {\n  async function findPeer(peerId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const res = await api.post('dht/findpeer', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: peerId,\n        ...options\n      }),\n      headers: options.headers\n    });\n\n    for await (const data of res.ndjson()) {\n      if (data.Type === FinalPeer && data.Responses) {\n        const {\n          ID,\n          Addrs\n        } = data.Responses[0];\n        return {\n          id: ID,\n          addrs: (Addrs || []).map(a => new Multiaddr(a))\n        };\n      }\n    }\n\n    throw new Error('not found');\n  }\n\n  return findPeer;\n});","map":{"version":3,"sources":["C:/Users/DM/Desktop/nftdapp/node_modules/ipfs-http-client/esm/src/dht/find-peer.js"],"names":["Multiaddr","configure","toUrlSearchParams","FinalPeer","createFindPeer","api","findPeer","peerId","options","res","post","signal","searchParams","arg","headers","data","ndjson","Type","Responses","ID","Addrs","id","addrs","map","a","Error"],"mappings":"AAAA,SAASA,SAAT,QAA0B,WAA1B;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,OAAO,MAAMC,cAAc,GAAGH,SAAS,CAACI,GAAG,IAAI;AAC7C,iBAAeC,QAAf,CAAwBC,MAAxB,EAA8C;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAC5C,UAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAJ,CAAS,cAAT,EAAyB;AACzCC,MAAAA,MAAM,EAAEH,OAAO,CAACG,MADyB;AAEzCC,MAAAA,YAAY,EAAEV,iBAAiB,CAAC;AAC9BW,QAAAA,GAAG,EAAEN,MADyB;AAE9B,WAAGC;AAF2B,OAAD,CAFU;AAMzCM,MAAAA,OAAO,EAAEN,OAAO,CAACM;AANwB,KAAzB,CAAlB;;AAQA,eAAW,MAAMC,IAAjB,IAAyBN,GAAG,CAACO,MAAJ,EAAzB,EAAuC;AACrC,UAAID,IAAI,CAACE,IAAL,KAAcd,SAAd,IAA2BY,IAAI,CAACG,SAApC,EAA+C;AAC7C,cAAM;AAACC,UAAAA,EAAD;AAAKC,UAAAA;AAAL,YAAcL,IAAI,CAACG,SAAL,CAAe,CAAf,CAApB;AACA,eAAO;AACLG,UAAAA,EAAE,EAAEF,EADC;AAELG,UAAAA,KAAK,EAAE,CAACF,KAAK,IAAI,EAAV,EAAcG,GAAd,CAAkBC,CAAC,IAAI,IAAIxB,SAAJ,CAAcwB,CAAd,CAAvB;AAFF,SAAP;AAID;AACF;;AACD,UAAM,IAAIC,KAAJ,CAAU,WAAV,CAAN;AACD;;AACD,SAAOnB,QAAP;AACD,CAtBsC,CAAhC","sourcesContent":["import { Multiaddr } from 'multiaddr';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { FinalPeer } from './response-types.js';\nexport const createFindPeer = configure(api => {\n  async function findPeer(peerId, options = {}) {\n    const res = await api.post('dht/findpeer', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: peerId,\n        ...options\n      }),\n      headers: options.headers\n    });\n    for await (const data of res.ndjson()) {\n      if (data.Type === FinalPeer && data.Responses) {\n        const {ID, Addrs} = data.Responses[0];\n        return {\n          id: ID,\n          addrs: (Addrs || []).map(a => new Multiaddr(a))\n        };\n      }\n    }\n    throw new Error('not found');\n  }\n  return findPeer;\n});"]},"metadata":{},"sourceType":"module"}